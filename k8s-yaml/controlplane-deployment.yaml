apiVersion: v1
kind: ServiceAccount
metadata:
  name: flighty-control-plane
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flighty-control-plane
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: [ "deployments", "services"]
    verbs: ["get", "create", "watch", "list", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "create", "list", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flighty-control-plane
subjects:
  - kind: ServiceAccount
    name: flighty-control-plane
    namespace: default
roleRef:
  kind: ClusterRole
  name: flighty-control-plane
  apiGroup: rbac.authorization.k8s.io
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: model-store
# spec:
#   capacity:
#     storage: 500Mi
#   accessModes:
#     - ReadWriteMany
#   storageClassName: hostpath
#   persistentVolumeReclaimPolicy: Delete
  # hostPath:
  #   path: /usr/local/var/flighty/models
  #   type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-store-pvc
spec:
  storageClassName: hostpath
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Mi
  # volumeName: model-store
---
apiVersion: v1
kind: Service
metadata:
  name: controlplane
spec:
  ports:
    - port: 80
  selector:
    app: controlplane
  clusterIP: None
---
# We want to make the control plane accessible from outside the cluster
# so that we can test it with the Python client
apiVersion: v1
kind: Service
metadata:
  name: controlplane-external
spec:
  type: NodePort
  selector:
    app: controlplane
  ports:
    # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controlplane
spec:
  selector:
    matchLabels:
      app: controlplane
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: controlplane
    spec:
      serviceAccountName: flighty-control-plane
      initContainers:
        - name: "wait-for-alembic"
          image: "ghcr.io/groundnuty/k8s-wait-for:v1.6"
          imagePullPolicy: Always
          args:
            - "job"
            - "db-upgrade"
      containers:
        - image: docker.io/gvashishtha/flighty:controlplane
          name: controlplane
          ports:
            - containerPort: 80
              name: controlplane
          volumeMounts:
            - name: model-store
              mountPath: /code/flighty-files
      volumes:
        - name: model-store
          persistentVolumeClaim:
            claimName: model-store-pvc
      imagePullSecrets:
        - name: regcred
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-upgrade
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        job: db-upgrade
    spec:
      restartPolicy: Never
      containers:
        - name: alembic
          image: docker.io/gvashishtha/flighty:alembic
          #args: ["downgrade", "-1"]
          args: ["upgrade", "864bdc030ff3"]
      imagePullSecrets:
        - name: regcred
